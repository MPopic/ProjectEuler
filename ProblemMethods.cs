using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    class ProblemMethods_1_to_50
    {
        /// <summary>
        /// Multiples of 3 and 5 -->
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        ///Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        public void Function_01()
        {
            int sum = 0;
            for (int i = 1; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                    sum += i;
            }
            Console.WriteLine("Sum = " + sum);
        }

        /// <summary>
        /// Even Fibonacci numbers -->
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be: 
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        public void Function_02()
        {
            int n1 = 0, n2 = 1, n3, sum = 0;
            int upperLimitValue = 4000000;
            bool upperNumberLimit = true;
            while (upperNumberLimit)
            {
                n3 = n1 + n2;
                if (n3 > upperLimitValue)
                {
                    upperNumberLimit = false;
                }

                if (n3 % 2 == 0 && upperNumberLimit)
                {
                    sum += n3;
                }
                n1 = n2;
                n2 = n3;
            }
            Console.WriteLine("Sum = " + sum);
        }

        /// <summary>
        /// Largest prime factor -->
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        /// What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        public void Function_03()
        {
            const long numm = 600851475143;
            long newnumm = numm;
            long largestFact = 0;

            //Any integer greater than 1 is either a prime number, or can be written as a unique product of prime numbers
            int counter = 2;
            while (counter * counter <= newnumm)
            {
                if (newnumm % counter == 0)
                {
                    newnumm /= counter;
                    largestFact = counter;
                }
                else
                {
                    counter++;
                }
            }
            if (newnumm > largestFact)
            { // the remainder is a prime number
                largestFact = newnumm;
            }

            Console.WriteLine(largestFact);
        }

        /// <summary>
        /// A palindromic number reads the same both ways. 
        /// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        public void Function_04()
        {
            List<int> palindrones = new List<int>();
            int number;

            for (int i = 999; i > 99; i--)
            {
                for (int j = 999; j > 99; j--)
                {
                    number = i * j;

                    int digit;
                    int reverseNumber = 0;
                    int temp = number;

                    while (temp > 0)
                    {
                        digit = temp % 10;
                        reverseNumber = reverseNumber * 10 + digit;
                        temp /= 10;
                    }

                    if (number == reverseNumber)
                    {
                        palindrones.Add(number);
                    }
                }
            }
            Console.WriteLine(palindrones.Max());
            
        }

        /// <summary>
        /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        /// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        /// </summary>
        public void Function_05()
        {
            // maxResult = 1*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20
            
            int[] numbersArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
            int maxNumber = 20;
            long result = 1;

            int currentFactor = 2;
            while (currentFactor <= maxNumber)
            {
                ArrayList indexes = new ArrayList();
                for (int i = 0; i < numbersArray.Length; i++)
                {
                    if (numbersArray[i] % currentFactor == 0)
                    {
                        indexes.Add(i);
                    }
                }

                if (indexes.Count >= 2)
                {
                    for (int i = 0; i < indexes.Count; i++)
                    {
                        numbersArray[(int)indexes[i]] = numbersArray[(int)indexes[i]] / currentFactor;
                    }

                    result *= currentFactor;
                }
                else
                {
                    currentFactor++;
                }
            }

            for (int i = 0; i < numbersArray.Length; i++)
            {
                result *= numbersArray[i];
            }

            Console.WriteLine(result);

        }

        /// <summary>
        /// The sum of the squares of the first ten natural numbers is,
        /// 1e2 + 2e2 + ... + 10e2 = 385
        /// The square of the sum of the first ten natural numbers is,
        /// (1 + 2 + ... + 10)e2 = 55e2 = 3025
        /// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640
        /// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        /// </summary>
        public void Function_06()
        {
            int maxNumber = 100;
            long sumOfSquares = 0;
            long squareOfSum = 0;

            for (int i = 1; i <= maxNumber; i++)
            {
                sumOfSquares += i * i;
                squareOfSum += i;
            }

            squareOfSum *= squareOfSum;

            Console.WriteLine(squareOfSum - sumOfSquares);

        }

        /// <summary>
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        /// What is the 10 001st prime number?
        /// </summary>
        public void Function_07()
        {
            int primeCounter = 0;

            for (int i = 2; ; i++)
            {
                bool isPrime = true;
                for (int j = 2; j <= i/2; j++)
                {
                    if (i % j == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime)
                {
                    primeCounter++;                    
                    if (primeCounter == 10001)
                    {
                        Console.WriteLine(i + " _ " + primeCounter);
                        break;
                    }
                }

            }
        }

        /// <summary>
        /// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
        /// 73167176531330624919225119674426574742355349194934
        /// 96983520312774506326239578318016984801869478851843
        /// 85861560789112949495459501737958331952853208805511
        /// 12540698747158523863050715693290963295227443043557
        /// 66896648950445244523161731856403098711121722383113
        /// 62229893423380308135336276614282806444486645238749
        /// 30358907296290491560440772390713810515859307960866
        /// 70172427121883998797908792274921901699720888093776
        /// 65727333001053367881220235421809751254540594752243
        /// 52584907711670556013604839586446706324415722155397
        /// 53697817977846174064955149290862569321978468622482
        /// 83972241375657056057490261407972968652414535100474
        /// 82166370484403199890008895243450658541227588666881
        /// 16427171479924442928230863465674813919123162824586
        /// 17866458359124566529476545682848912883142607690042
        /// 24219022671055626321111109370544217506941658960408
        /// 07198403850962455444362981230987879927244284909188
        /// 84580156166097919133875499200524063689912560717606
        /// 05886116467109405077541002256983155200055935729725
        /// 71636269561882670428252483600823257530420752963450
        /// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        /// </summary>
        public void Function_08()
        {

            int[] number = new int[] {
            7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,
            9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,
            8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,
            1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,
            6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,
            6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,
            3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,
            7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,
            6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,
            5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,
            5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,
            8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,
            8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,
            1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,
            1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,
            2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,
            0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,
            8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,
            0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,
            7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0
            };

            List<long> products = new List<long>();
            int start = 0;
            long currentProduct = 1;

            while (start < 987)
            {
                for (int i = start; i < start + 13; i++)
                {
                    currentProduct *= number[i];
                }

                start++;
                products.Add(currentProduct);
                currentProduct = 1;
            }

            Console.WriteLine(products.Max());
        }

        /// <summary>
        /// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
        /// ae2 + be2 = ce2
        /// For example, 3e2 + 4e2 = 9 + 16 = 25 = 5e2.
        /// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        /// Find the product abc.
        /// </summary>
        public void Function_09()
        {
            const int sum = 1000;

            for (int a = 0; a < sum/3; a++)
            {
                for (int b = 0; b < sum/2; b++)
                {
                    int c = sum - a - b;

                    if((a*a + b*b) == c * c)
                    {
                        Console.WriteLine(a + " " +  b + " " +  c);
                        Console.WriteLine(a*b*c);
                    }

                }
            }
        }

        /// <summary>
        /// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        /// Find the sum of all the primes below two million.
        /// </summary>
        public void Function_10()
        {
            const int maxNumber = 2000000;
            bool[] prime = new bool[maxNumber + 1];

            for (int i = 0; i < maxNumber + 1; i++)
                prime[i] = true;

            for (int p = 2; p * p <= maxNumber; p++)
            {
                if (prime[p] == true )
                {
                    for (int i = p * 2; i <= maxNumber; i += p)
                    {
                        prime[i] = false;
                    }
                }
            }

            int sum = 0;
            for (int i = 2; i <= maxNumber; i++)
            {
                if (prime[i])
                {
                    sum += i;
                }
            }
            Console.WriteLine(sum);
        }

        /// <summary>
        /// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
        /// 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        /// 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        /// 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        /// 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        /// 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        /// 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        /// 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        /// 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        /// 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        /// 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        /// 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        /// 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        /// 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        /// 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        /// 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        /// 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        /// 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        /// 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        /// 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        /// 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
        /// 
        /// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
        /// What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
        /// </summary>
        public void Function_11()
        {
            int[,] grid = new int[,]
            {
                {08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08 },
                {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00 },
                {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65 },
                {52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91 },
                {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80 },
                {24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50 },
                {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70 },
                {67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21 },
                {24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72 },
                {21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95 },
                {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92 },
                {16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57 },
                {86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58 },
                {19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40 },
                {04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66 },
                {88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69 },
                {04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36 },
                {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16 },
                {20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54 },
                {01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48 }
            };

            int maxProduct = 0;
            int tempProduct;

            for (int i = 0; i < 20; i++)
            {
                for (int j = 0; j < 20; j++)
                {
                    if (i < 17)
                    {
                        tempProduct = grid[i,j] * grid[i + 1, j] * grid[i + 2, j] * grid[i + 3, j];
                        if (tempProduct > maxProduct) 
                            maxProduct = tempProduct;
                    }
                    if (j < 17)
                    {
                        tempProduct = grid[i, j] * grid[i, j + 1] * grid[i, j + 2] * grid[i, j + 3];
                        if (tempProduct > maxProduct) 
                            maxProduct = tempProduct;
                    }
                    if (j < 17 && i < 17)
                    {
                        tempProduct = grid[i, j] * grid[i + 1, j + 1] * grid[i + 2, j + 2] * grid[i + 3, j + 3];
                        if (tempProduct > maxProduct) 
                            maxProduct = tempProduct;
                    }
                    if (i < 17 && j > 2)
                    {
                        tempProduct = grid[i, j] * grid[i + 1, j - 1] * grid[i + 2, j - 2] * grid[i + 3, j - 3];
                        if (tempProduct > maxProduct) 
                            maxProduct = tempProduct;
                    }
                }
            }
            Console.WriteLine(maxProduct);



        }

        /// <summary>
        /// The sequence of triangle numbers is generated by adding the natural numbers. 
        /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
        /// The first ten terms would be:The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        /// Let us list the factors of the first seven triangle numbers:
        /// 1: 1
        /// 3: 1,3
        /// 6: 1,2,3,6
        /// 10: 1,2,5,10
        /// 15: 1,3,5,15
        /// 21: 1,3,7,21
        /// 28: 1,2,4,7,14,28
        /// We can see that 28 is the first triangle number to have over five divisors.
        /// What is the value of the first triangle number to have over five hundred divisors?
        /// </summary>
        public void Function_12()
        {
            decimal number;
            int divisors = 0;

            for (int i = 1;; i++)
            {
                number = (i * (i + 1)) / 2;

                for (int j = 1; j <= number; j++)
                {
                    if (number % j == 0)
                        divisors++;
                }

                if (divisors > 500)
                {
                    break;
                }
                else
                {
                    divisors = 0;
                }
            }

            Console.WriteLine(number);
        }

        /// <summary>
        /// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
        /// </summary>
        public void Function_13()
        {
            BigInteger[] numbers = new BigInteger[]
            {
                BigInteger.Parse("37107287533902102798797998220837590246510135740250"),
                BigInteger.Parse("46376937677490009712648124896970078050417018260538"),
                BigInteger.Parse("74324986199524741059474233309513058123726617309629"),
                BigInteger.Parse("91942213363574161572522430563301811072406154908250"),
                BigInteger.Parse("23067588207539346171171980310421047513778063246676"),
                BigInteger.Parse("89261670696623633820136378418383684178734361726757"),
                BigInteger.Parse("28112879812849979408065481931592621691275889832738"),
                BigInteger.Parse("44274228917432520321923589422876796487670272189318"),
                BigInteger.Parse("47451445736001306439091167216856844588711603153276"),
                BigInteger.Parse("70386486105843025439939619828917593665686757934951"),
                BigInteger.Parse("62176457141856560629502157223196586755079324193331"),
                BigInteger.Parse("64906352462741904929101432445813822663347944758178"),
                BigInteger.Parse("92575867718337217661963751590579239728245598838407"),
                BigInteger.Parse("58203565325359399008402633568948830189458628227828"),
                BigInteger.Parse("80181199384826282014278194139940567587151170094390"),
                BigInteger.Parse("35398664372827112653829987240784473053190104293586"),
                BigInteger.Parse("86515506006295864861532075273371959191420517255829"),
                BigInteger.Parse("71693888707715466499115593487603532921714970056938"),
                BigInteger.Parse("54370070576826684624621495650076471787294438377604"),
                BigInteger.Parse("53282654108756828443191190634694037855217779295145"),
                BigInteger.Parse("36123272525000296071075082563815656710885258350721"),
                BigInteger.Parse("45876576172410976447339110607218265236877223636045"),
                BigInteger.Parse("17423706905851860660448207621209813287860733969412"),
                BigInteger.Parse("81142660418086830619328460811191061556940512689692"),
                BigInteger.Parse("51934325451728388641918047049293215058642563049483"),
                BigInteger.Parse("62467221648435076201727918039944693004732956340691"),
                BigInteger.Parse("15732444386908125794514089057706229429197107928209"),
                BigInteger.Parse("55037687525678773091862540744969844508330393682126"),
                BigInteger.Parse("18336384825330154686196124348767681297534375946515"),
                BigInteger.Parse("80386287592878490201521685554828717201219257766954"),
                BigInteger.Parse("78182833757993103614740356856449095527097864797581"),
                BigInteger.Parse("16726320100436897842553539920931837441497806860984"),
                BigInteger.Parse("48403098129077791799088218795327364475675590848030"),
                BigInteger.Parse("87086987551392711854517078544161852424320693150332"),
                BigInteger.Parse("59959406895756536782107074926966537676326235447210"),
                BigInteger.Parse("69793950679652694742597709739166693763042633987085"),
                BigInteger.Parse("41052684708299085211399427365734116182760315001271"),
                BigInteger.Parse("65378607361501080857009149939512557028198746004375"),
                BigInteger.Parse("35829035317434717326932123578154982629742552737307"),
                BigInteger.Parse("94953759765105305946966067683156574377167401875275"),
                BigInteger.Parse("88902802571733229619176668713819931811048770190271"),
                BigInteger.Parse("25267680276078003013678680992525463401061632866526"),
                BigInteger.Parse("36270218540497705585629946580636237993140746255962"),
                BigInteger.Parse("24074486908231174977792365466257246923322810917141"),
                BigInteger.Parse("91430288197103288597806669760892938638285025333403"),
                BigInteger.Parse("34413065578016127815921815005561868836468420090470"),
                BigInteger.Parse("23053081172816430487623791969842487255036638784583"),
                BigInteger.Parse("11487696932154902810424020138335124462181441773470"),
                BigInteger.Parse("63783299490636259666498587618221225225512486764533"),
                BigInteger.Parse("67720186971698544312419572409913959008952310058822"),
                BigInteger.Parse("95548255300263520781532296796249481641953868218774"),
                BigInteger.Parse("76085327132285723110424803456124867697064507995236"),
                BigInteger.Parse("37774242535411291684276865538926205024910326572967"),
                BigInteger.Parse("23701913275725675285653248258265463092207058596522"),
                BigInteger.Parse("29798860272258331913126375147341994889534765745501"),
                BigInteger.Parse("18495701454879288984856827726077713721403798879715"),
                BigInteger.Parse("38298203783031473527721580348144513491373226651381"),
                BigInteger.Parse("34829543829199918180278916522431027392251122869539"),
                BigInteger.Parse("40957953066405232632538044100059654939159879593635"),
                BigInteger.Parse("29746152185502371307642255121183693803580388584903"),
                BigInteger.Parse("41698116222072977186158236678424689157993532961922"),
                BigInteger.Parse("62467957194401269043877107275048102390895523597457"),
                BigInteger.Parse("23189706772547915061505504953922979530901129967519"),
                BigInteger.Parse("86188088225875314529584099251203829009407770775672"),
                BigInteger.Parse("11306739708304724483816533873502340845647058077308"),
                BigInteger.Parse("82959174767140363198008187129011875491310547126581"),
                BigInteger.Parse("97623331044818386269515456334926366572897563400500"),
                BigInteger.Parse("42846280183517070527831839425882145521227251250327"),
                BigInteger.Parse("55121603546981200581762165212827652751691296897789"),
                BigInteger.Parse("32238195734329339946437501907836945765883352399886"),
                BigInteger.Parse("75506164965184775180738168837861091527357929701337"),
                BigInteger.Parse("62177842752192623401942399639168044983993173312731"),
                BigInteger.Parse("32924185707147349566916674687634660915035914677504"),
                BigInteger.Parse("99518671430235219628894890102423325116913619626622"),
                BigInteger.Parse("73267460800591547471830798392868535206946944540724"),
                BigInteger.Parse("76841822524674417161514036427982273348055556214818"),
                BigInteger.Parse("97142617910342598647204516893989422179826088076852"),
                BigInteger.Parse("87783646182799346313767754307809363333018982642090"),
                BigInteger.Parse("10848802521674670883215120185883543223812876952786"),
                BigInteger.Parse("71329612474782464538636993009049310363619763878039"),
                BigInteger.Parse("62184073572399794223406235393808339651327408011116"),
                BigInteger.Parse("66627891981488087797941876876144230030984490851411"),
                BigInteger.Parse("60661826293682836764744779239180335110989069790714"),
                BigInteger.Parse("85786944089552990653640447425576083659976645795096"),
                BigInteger.Parse("66024396409905389607120198219976047599490197230297"),
                BigInteger.Parse("64913982680032973156037120041377903785566085089252"),
                BigInteger.Parse("16730939319872750275468906903707539413042652315011"),
                BigInteger.Parse("94809377245048795150954100921645863754710598436791"),
                BigInteger.Parse("78639167021187492431995700641917969777599028300699"),
                BigInteger.Parse("15368713711936614952811305876380278410754449733078"),
                BigInteger.Parse("40789923115535562561142322423255033685442488917353"),
                BigInteger.Parse("44889911501440648020369068063960672322193204149535"),
                BigInteger.Parse("41503128880339536053299340368006977710650566631954"),
                BigInteger.Parse("81234880673210146739058568557934581403627822703280"),
                BigInteger.Parse("82616570773948327592232845941706525094512325230608"),
                BigInteger.Parse("22918802058777319719839450180888072429661980811197"),
                BigInteger.Parse("77158542502016545090413245809786882778948721859617"),
                BigInteger.Parse("72107838435069186155435662884062257473692284509516"),
                BigInteger.Parse("20849603980134001723930671666823555245252804609722"),
                BigInteger.Parse("53503534226472524250874054075591789781264330331690")
            };

            BigInteger sum = 0;

            for (int i = 0; i < numbers.Length; i++)
            {
                sum += numbers[i];
            }

            Console.WriteLine(sum);
        }

        /// <summary>
        /// The following iterative sequence is defined for the set of positive integers:
        /// n → n/2 (n is even)
        /// n → 3n + 1 (n is odd)
        /// Using the rule above and starting with 13, we generate the following sequence: 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
        /// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
        /// Which starting number, under one million, produces the longest chain?
        /// NOTE: Once the chain starts the terms are allowed to go above one million.
        /// </summary>
        public void Function_14()
        {
            int startNumber = 1;
            int numberOfIterations = 0;
            int tempNumber;
            int tempIterations = 0;

            for (int i = 2; i < 1000000; i++)
            {
                tempNumber = i;
                while (tempNumber != 1)
                {
                    if (tempNumber % 2 == 0)
                    {
                        tempNumber /= 2;
                    }
                    else
                    {
                        tempNumber = 3 * tempNumber + 1;
                    }
                    tempIterations++;
                }

                if (tempIterations > numberOfIterations)
                {
                    numberOfIterations = tempIterations;
                    startNumber = i;
                }
                tempIterations = 0;
            }
            Console.WriteLine(startNumber);
        }


        /// <summary>
        /// Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
        /// How many such routes are there through a 20×20 grid?
        /// </summary>
        public void Function_15()
        {
            // Lattice Paths binome formula ((20 + 20) en 20) is (40 en 20)

            long n = 40;
            long k = 20;
            double sum = 0;
            for (long i = 0; i < k; i++)
            {
                sum += Math.Log10(n - i);
                sum -= Math.Log10(i + 1);
            }
            sum = Math.Pow(10, sum);

            Console.WriteLine(sum);
        }

        /// <summary>
        /// 2e15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
        /// What is the sum of the digits of the number 2e1000?
        /// </summary>
        public void Function_16()
        {
            String numbers = BigInteger.Pow(2, 1000).ToString();

            int sumOfDigits = numbers.Sum(c => c - '0');

            Console.WriteLine(sumOfDigits);
        }

        /// <summary>
        /// If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
        /// If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
        /// NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
        /// </summary>
        public void Function_17()
        {
            int sum = 0;
            int ones, tens, tensIfOneFirst, hundred;

            for (int i = 101; i <= 105; i++)
            {                
                hundred = i / 100;
                tens = (i / 10) % 10;
                ones = i % 10;

                if ((tens != 0)&&(ones != 0 ))
                {
                    switch (hundred)
                    {
                        case 0:
                            break;
                        case 1:
                            sum += 13;
                            break;
                        case 2:
                            sum += 13;
                            break;
                        case 3:
                            sum += 14;
                            break;
                        case 4:
                            sum += 14;
                            break;
                        case 5:
                            sum += 14;
                            break;
                        case 6:
                            sum += 13;
                            break;
                        case 7:
                            sum += 15;
                            break;
                        case 8:
                            sum += 15;
                            break;
                        case 9:
                            sum += 14;
                            break;
                    }

                }
                else
                {
                    switch (hundred)
                    {
                        case 0:
                            break;
                        case 1:
                            sum += 13;
                            break;
                        case 2:
                            sum += 13;
                            break;
                        case 3:
                            sum += 15;
                            break;
                        case 4:
                            sum += 14;
                            break;
                        case 5:
                            sum += 14;
                            break;
                        case 6:
                            sum += 13;
                            break;
                        case 7:
                            sum += 15;
                            break;
                        case 8:
                            sum += 13;
                            break;
                        case 9:
                            sum += 14;
                            break;
                    }
                }
                
                
                if (tens == 1)
                {
                    tensIfOneFirst = ones;
                                            
                    switch (tensIfOneFirst)
                        {
                            case 0:
                                sum += 3;
                                break;
                            case 1:
                                sum += 6;
                                break;
                            case 2:
                                sum += 6;
                                break;
                            case 3:
                                sum += 8;
                                break;
                            case 4:
                                sum += 8;
                                break;
                            case 5:
                                sum += 7;
                                break;
                            case 6:
                                sum += 7;
                                break;
                            case 7:
                                sum += 9;
                                break;
                            case 8:
                                sum += 8;
                                break;
                            case 9:
                                sum += 8;
                                break;
                        }
                }
                else
                {
                    switch (tens)
                        {
                            case 0:
                                break;
                            case 2:
                                sum += 6;
                                break;
                            case 3:
                                sum += 6;
                                break;
                            case 4:
                                sum += 5;
                                break;
                            case 5:
                                sum += 5;
                                break;
                            case 6:
                                sum += 5;
                                break;
                            case 7:
                                sum += 7;
                                break;
                            case 8:
                                sum += 6;
                                break;
                            case 9:
                                sum += 6;
                                break;
                        }
                    
                    switch (ones)
                        {
                            case 0:
                                break;
                            case 1:
                                sum += 3;
                                break;
                            case 2:
                                sum += 3;
                                break;
                            case 3:
                                sum += 5;
                                break;
                            case 4:
                                sum += 4;
                                break;
                            case 5:
                                sum += 4;
                                break;
                            case 6:
                                sum += 3;
                                break;
                            case 7:
                                sum += 5;
                                break;
                            case 8:
                                sum += 5;
                                break;
                            case 9:
                                sum += 4;
                                break;
                        }
                }

                if (i == 1000)
                {
                    sum += 11;
                }
            }
            Console.WriteLine("Sum is: " + sum);
        }

        /// <summary>
        /// By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
        ///    3
        ///   7 4
        ///  2 4 6
        /// 8 5 9 3
        /// That is, 3 + 7 + 4 + 9 = 23.
        /// Find the maximum total from top to bottom of the triangle below:
        ///               75
        ///              95 64
        ///             17 47 82
        ///            18 35 87 10
        ///           20 04 82 47 65
        ///          19 01 23 75 03 34
        ///         88 02 77 73 07 63 67
        ///        99 65 04 28 06 16 70 92
        ///       41 41 26 56 83 40 80 70 33
        ///      41 48 72 33 47 32 37 16 94 29
        ///     53 71 44 65 25 43 91 52 97 51 14
        ///    70 11 33 28 77 73 17 78 39 68 17 57
        ///   91 71 52 38 17 14 91 43 58 50 27 29 48
        ///  63 66 04 68 89 53 67 30 73 16 69 87 40 31
        /// 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
        /// 
        /// NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
        /// </summary>
        public void Function_18()
        {
            int[,] matrix = new int[,]
            {
                {75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {20, 04, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {19, 01, 23, 75, 03, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {88, 02, 77, 73, 07, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0},
                {99, 65, 04, 28, 06, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0},
                {41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0},
                {41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0},
                {53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0},
                {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0},
                {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0},
                {63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0 },
                {04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23 }
            };


            for (int i = matrix.GetLength(0) - 2; i >= 0; i--)
            {
                for (int j = 0; j <= i; j++)
                {
                    if (matrix[i +1, j] > matrix[i + 1, j + 1])
                    {
                        matrix[i, j] += matrix[i + 1, j];
                    }
                    else
                    {
                        matrix[i, j] += matrix[i + 1, j + 1];
                    }
                }
            }

            Console.WriteLine(matrix[0, 0]);
        }

        /// <summary>
        /// You are given the following information, but you may prefer to do some research for yourself.
        ///     1 Jan 1900 was a Monday.
        ///     Thirty days has September,
        ///     April, June and November.
        ///     All the rest have thirty-one,
        ///     Saving February alone,
        ///     Which has twenty-eight, rain or shine.
        ///     And on leap years, twenty-nine.
        ///     A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
        ///     How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
        /// </summary>
        public void Function_19()
        {
            DateTime startDate = new DateTime(1901, 1, 1);
            DateTime endDate = new DateTime(2000, 1, 31);

            int sundayCounter = 1;


            for (DateTime i = startDate; i <= endDate; i = i.AddDays(1))
            {
                if (i.DayOfWeek == DayOfWeek.Sunday && (i.Day == 1))
                {
                    sundayCounter++;
                }
            }
            Console.WriteLine(sundayCounter);


        }

        /// <summary>
        /// n! means n × (n − 1) × ... × 3 × 2 × 1
        /// For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
        /// and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
        /// Find the sum of the digits in the number 100!
        /// </summary>
        public void Function_20()
        {            
            BigInteger factorial  = 1;

            for (int i = 1; i <= 100; i++)
            {
                factorial *= i;
            }

            Console.WriteLine(factorial.ToString().Sum(c => c - '0'));
        }
        /// <summary>
        /// 
        /// </summary>
        public void Function_21()
        {
            int sumOfAmicable = 0;

            for (int i = 1; i < 10000; i++)
            {
                int tem = sumOfFactors(i);
                if (i == sumOfFactors(tem) && tem > i)
                {
                    sumOfAmicable += i + tem;
                }
            }
            Console.WriteLine(sumOfAmicable);
        }

        private int sumOfFactors(int number)
        {
            int sum = 1;

            for (int i = 2; i <= number / 2; i++)
            {
                if (number % i == 0)
                {
                    sum += i;
                }                
            }
            return sum;
        }

        /// <summary>
        /// Using names.txt (right click and 'Save Link/Target As...'), 
        /// a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. 
        /// Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
        /// For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. 
        /// So, COLIN would obtain a score of 938 × 53 = 49714.
        /// What is the total of all the name scores in the file?
        /// </summary>
        public void Function_22()
        {
            int totalNameScore = 0;
            int nameScore;
            string namesTxt = System.IO.File.ReadAllText(@"C:\Users\Marinko\Source\Repos\ProjectEuler\p022_names.txt");
            string[] names = namesTxt.Split(',');
            ArrayList arrayNames = new ArrayList();
            for (int i = 0; i < names.Length; i++)
            {
                arrayNames.Add(names[i].Substring(1, names[i].Length - 2));
            }

            arrayNames.Sort();
            foreach (var item in arrayNames)
            {
                nameScore = 0;
                foreach (char c in (string)item)
                {
                    nameScore += ((int)c - 64);
                }
                totalNameScore += nameScore * (arrayNames.IndexOf(item) + 1);
            }

            Console.WriteLine(totalNameScore);

        }

    }
}
